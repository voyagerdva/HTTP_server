Написать код, выполняющий запрос в базу данных для получения СПИСКА ЮЗЕРОВ.

I - БЕЗ УЧЕТА ТЕСТОВ - ЗАПУСК С ИНСОМНИЕЙ:

1.	В корневой папке сервера создать папку QuerySpecification и ней создать модуль UserQuerySpecification.py, в котором создать класс с названием UserQuerySpecification. Его поля будут соответствовать полям спецификации запроса для получения списка юзеров, точнее самым левым полям в спецификации.

2.	В этом классе создать одно поле - "paging". Ему, в качестве значения, назначить словарь из двух ключей - "currentPosition": 0 и "pageSize": 10.
				{
				"paging":	{"currentPosition": 0,
							"pageSize": 10}
				}

3.	В папке QuerySpecification создать модуль Pages.py, в котором создать класс Pages и в нем определить два поля - "currentPosition" и "pageSize". Это будут поля и значения для словаря поля "paging" из QuerySpecification. 

4.	Присвоение словаря {"currentPosition":__ , "pageSize":__}  в качестве значения полю "pagin" должно происходить при передаче объекта Pages объекту QuerySpecification в качестве аргумента.

5.	Другие поля класса UserQuerySpecification, как например, filters, queryString, будут являться внутренними (т.е. self ), а значения этих полей будут заполняться из других объектов других классов, в том числе и из класса User, Product.

6.	Дальше схема такая:
	6.1 в клиенте (например в инсомнии) в соответствии со спецификацией формируется json-body,
	
	6.2 и передается в POST-запросе в сервер,
	
	6.3 и далее передается в метод POST-redirect (сейчас его нет - надо будет создать) контроллера.
	
	6.4 В контроллере из боди десереализуется объект UserQuerySpecification и передается в метод listUsers класса UserDaoи этот объект передается в метод listUsers класса UserDao.
	
	6.5 Сначала будет {"paging":{"currentPosition": 0,"pageSize": 10}} - значит сперва мы будем делать выборку из базы по всем полям (столбцам) с разбивкой вывода по 10 записей. При этом - currentPosition соответствует OFFSET, pageSize - LIMIT в запросе SELECT.
	
	6.6 в методе listUsers значения полей подставляются в качестве значений параметров запроса SELECT и делается сам запрос. Из базы приходит ответ, в котором содержится информация о 10-ти первых юзерах;
	
	6.7 на основании ответа создаются СУЩНОСТИ юзеров и складываются в список.
	
	6.8 этот список отправляется в контроллер, который, затем, формирует список из юзеровДТО, сериализует его, получая строку вида json-словаря - такого же разветвленного вида, что и исходный, за исключением каких-то полей.
	
	6.9 эта строка затем передается в сервер и отправляется в качестве ответа клиенту.


II - ПРОВЕРКА РАБОТЫ ПРОГРАММЫ. ПРОВЕДЕНИЕ ТЕСТОВ:

1.	В папке testunit создать папку QuerySpecification и ней создать модуль UserQuerySpecification.py, в котором создать класс с названием UserQuerySpecification. Его поля будут соответствовать полям спецификации запроса для получения списка юзеров, точнее самым левым полям в спецификации.

2.	В этом классе создать одно поле - "paging". Ему, в качестве значения, назначить словарь из двух ключей - "currentPosition": 0 и "pageSize": 10.

3.	В папке testunit/QuerySpecification создать модуль Pages.py, в котором создать класс Pages и в нем определить два поля - "currentPosition" и "pageSize". Это будут поля и значения для словаря поля "paging" из QuerySpecification.

4. Создать фикстуру, в которой объект UserQuerySpecification сериализовать в json-body и передать его в качестве параметра в запрос requests, который уйдет на HTTP-сервер.

5. Дальше - см. часть I пункты 6.3 - 6.9